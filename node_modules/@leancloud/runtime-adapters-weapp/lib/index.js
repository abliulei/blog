"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("miniprogram-api-typings");
exports.storage = {
    getItem: function (key) {
        return wx.getStorageSync(key);
    },
    setItem: function (key, value) {
        return wx.setStorageSync(key, value);
    },
    removeItem: function (key) {
        return this.setItem(key, "");
    },
    clear: function () {
        return wx.clearStorageSync();
    }
};
var event_target_shim_1 = require("event-target-shim");
var EVENTS = ["open", "error", "message", "close"];
var WS = /** @class */ (function (_super) {
    __extends(WS, _super);
    function WS(url, protocol) {
        var _this = this;
        if (!url) {
            throw new TypeError("Failed to construct 'WebSocket': url required");
        }
        if (protocol &&
            !(wx.canIUse && wx.canIUse("connectSocket.object.protocols"))) {
            throw new Error("subprotocol not supported in weapp");
        }
        _this = _super.call(this) || this;
        _this._url = url;
        _this._protocol = protocol;
        _this._readyState = WS.CONNECTING;
        var errorHandler = function (event) {
            _this._readyState = WS.CLOSED;
            _this.dispatchEvent({
                type: "error",
                message: event.errMsg
            });
        };
        var socketTask = wx.connectSocket({
            url: url,
            protocols: _this._protocol === undefined || Array.isArray(_this._protocol)
                ? _this._protocol
                : [_this._protocol],
            fail: function (error) { return setTimeout(function () { return errorHandler(error); }, 0); }
        });
        _this._socketTask = socketTask;
        socketTask.onOpen(function (event) {
            _this._readyState = WS.OPEN;
            _this.dispatchEvent({
                type: "open"
            });
        });
        socketTask.onError(errorHandler);
        socketTask.onMessage(function (event) {
            var data = event.data;
            _this.dispatchEvent({
                data: data,
                type: "message"
            });
        });
        socketTask.onClose(function (event) {
            _this._readyState = WS.CLOSED;
            var code = event.code, reason = event.reason;
            _this.dispatchEvent({
                code: code,
                reason: reason,
                type: "close"
            });
        });
        return _this;
    }
    Object.defineProperty(WS.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WS.prototype, "protocol", {
        get: function () {
            return this._protocol;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WS.prototype, "readyState", {
        get: function () {
            return this._readyState;
        },
        enumerable: true,
        configurable: true
    });
    WS.prototype.close = function () {
        if (this.readyState === WS.CLOSED)
            return;
        if (this.readyState === WS.CONNECTING) {
            console.warn("close WebSocket which is connecting might not work");
        }
        this._socketTask.close({});
    };
    WS.prototype.send = function (data) {
        if (this.readyState !== WS.OPEN) {
            throw new Error("INVALID_STATE_ERR");
        }
        if (!(typeof data === "string" || data instanceof ArrayBuffer)) {
            throw new TypeError("only String/ArrayBuffer supported");
        }
        this._socketTask.send({
            data: data
        });
    };
    WS.CONNECTING = 0;
    WS.OPEN = 1;
    WS.CLOSING = 2;
    WS.CLOSED = 3;
    return WS;
}(event_target_shim_1.EventTarget(EVENTS)));
exports.WebSocket = WS;
exports.request = function (url, _a) {
    var _b = _a === void 0 ? {} : _a, method = _b.method, data = _b.data, headers = _b.headers;
    return new Promise(function (resolve, reject) {
        return wx.request({
            url: url,
            method: method,
            data: data,
            header: headers,
            responseType: "text",
            success: function (response) {
                var status = response.statusCode, data = response.data, rest = __rest(response, ["statusCode", "data"]);
                resolve(__assign(__assign({}, rest), { data: typeof data === "string" ? JSON.parse(data) : data, status: status, ok: !(status >= 400) }));
            },
            fail: function (response) {
                reject(new Error(response.errMsg));
            }
        });
    });
};
exports.upload = function (url, file, _a) {
    var _b = _a === void 0 ? {} : _a, headers = _b.headers, data = _b.data, onprogress = _b.onprogress;
    if (!(file && file.data && file.data.uri)) {
        return Promise.reject(new TypeError("File data must be an object like { uri: localPath }."));
    }
    return new Promise(function (resolve, reject) {
        var _a;
        var task = wx.uploadFile({
            url: url,
            header: headers,
            filePath: file.data.uri,
            name: file.field,
            formData: data,
            success: function (response) {
                var status = response.statusCode, data = response.data, rest = __rest(response, ["statusCode", "data"]);
                resolve(__assign(__assign({}, rest), { data: typeof data === "string" ? JSON.parse(data) : data, status: status, ok: !(status >= 400) }));
            },
            fail: function (response) {
                reject(new Error(response.errMsg));
            }
        });
        (_a = task === null || task === void 0 ? void 0 : task.onProgressUpdate) === null || _a === void 0 ? void 0 : _a.call(task, function (_a) {
            var progress = _a.progress, totalBytesSent = _a.totalBytesSent, totalBytesExpectedToSend = _a.totalBytesExpectedToSend;
            return onprogress === null || onprogress === void 0 ? void 0 : onprogress({
                percent: progress,
                loaded: totalBytesSent,
                total: totalBytesExpectedToSend
            });
        });
    });
};
//# sourceMappingURL=index.js.map