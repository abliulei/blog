{"remainingRequest":"D:\\blog\\node_modules\\thread-loader\\dist\\cjs.js!D:\\blog\\node_modules\\babel-loader\\lib\\index.js!D:\\blog\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\blog\\src\\components\\Music.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\blog\\src\\components\\Music.vue","mtime":1584887342777},{"path":"D:\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1564912410434},{"path":"D:\\blog\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\blog\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1564912410434},{"path":"D:\\blog\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      error: '数据加载中',\n      musicList: [],\n      nowMusic: 0,\n      rate: 0,\n      //进度，百分数\n      mp3_url: '',\n      is_play: false,\n      is_muted: false,\n      times: 0,\n      //总秒数\n      time: 0,\n      //已经播放秒数\n      myTimer: null\n    };\n  },\n  mounted: function mounted() {\n    //钩子函数\n    // clearInterval(this.timer)\n    this.getMusic();\n  },\n  methods: {\n    /**\r\n     * 初始获取播放列表\r\n    */\n    getMusic: function getMusic() {\n      this.$http.get('https://a.abliulei.com/api/getmusic').then(function (res) {\n        var data = res.data.data;\n        this.musicList = data;\n        this.mp3_url = this.musicList[0][\"url\"];\n      });\n    },\n\n    /**\r\n     * 播放或者暂停\r\n    */\n    musicPlayOrPause: function musicPlayOrPause() {\n      var _this = this;\n\n      var audio = document.getElementsByClassName(\"audio\")[0];\n\n      if (_this.is_play) {\n        //暂停\n        _this.progress(_this.time, _this.times, 0); //进度条暂停\n\n\n        audio.pause();\n      } else {\n        //判断是不是重新播放，如果进度条是0就需要加载新的\n        if (_this.time == 0) {\n          audio.addEventListener('ended', function () {\n            _this.musicNext();\n          }, false);\n          audio.load();\n\n          audio.oncanplay = function () {\n            _this.times = audio.duration;\n          };\n        } //恢复进度条，播放\n\n\n        _this.progress(_this.time, _this.times, 1);\n\n        audio.play();\n      }\n\n      _this.is_play = !_this.is_play;\n\n      _this.returnStatus(_this.is_play); //返回播放状态\n\n    },\n\n    /**\r\n     * 控制进度条\r\n     * time   当前已经播放的秒数\r\n     * times  音乐总时长\r\n     * type   0暂停播放，1开始播放\r\n    */\n    progress: function progress(time, times, type) {\n      var _this = this;\n\n      clearInterval(_this.timer);\n      _this.timer = null;\n\n      if (type === 1) {\n        _this.time = time;\n        _this.times = times;\n        _this.timer = setInterval(function () {\n          _this.rate = (_this.time / _this.times * 100).toFixed(2);\n          _this.time++;\n\n          if (_this.time == _this.times) {\n            clearInterval(_this.timer);\n            _this.timer = null;\n          }\n        }, 1000);\n      }\n    },\n\n    /**\r\n     * 上一首\r\n    */\n    musicPrev: function musicPrev() {\n      // 默认循环播放，如果当前在第一首直接播放最后一首\n      if (this.nowMusic == 0) {\n        this.nowMusic = this.musicList.length - 1;\n      } else {\n        this.nowMusic = this.nowMusic - 1;\n      }\n\n      this.is_play = false;\n      this.time = 0;\n      this.rate = 0;\n      this.playMusic();\n    },\n\n    /**\r\n     * 下一首\r\n    */\n    musicNext: function musicNext() {\n      // 默认循环播放，如果当前在最后一首直接播放第一首\n      if (this.nowMusic == this.musicList.length) {\n        this.nowMusic = 0;\n      } else {\n        this.nowMusic = this.nowMusic + 1;\n      }\n\n      this.is_play = false;\n      this.time = 0;\n      this.rate = 0;\n      this.playMusic();\n    },\n\n    /**\r\n     * 播放列表里的歌\r\n    */\n    playList: function playList(index) {\n      this.nowMusic = index;\n      this.is_play = false;\n      this.time = 0;\n      this.rate = 0;\n      this.playMusic();\n    },\n\n    /**\r\n     * 播放音频\r\n    */\n    playMusic: function playMusic() {\n      var _this = this;\n\n      var audio = document.getElementsByClassName(\"audio\")[0];\n      _this.mp3_url = _this.musicList[_this.nowMusic][\"url\"]; //延迟200毫秒执行否则播放失败\n\n      setTimeout(function () {\n        audio.addEventListener('ended', function () {\n          _this.musicNext();\n        }, false);\n        audio.load();\n\n        audio.oncanplay = function () {\n          _this.times = audio.duration;\n\n          _this.progress(_this.time, _this.times, 1);\n        };\n\n        audio.play();\n        _this.is_play = true;\n\n        _this.returnStatus(_this.is_play); //返回播放状态\n\n      }, 200);\n    },\n    musicVoice: function musicVoice() {\n      var audio = document.getElementsByClassName(\"audio\")[0];\n      audio.muted = !audio.muted;\n      this.is_muted = !this.is_muted;\n    },\n\n    /**\r\n     * 返回播放状态\r\n    */\n    returnStatus: function returnStatus() {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.$emit('returnStatus', _this.is_play); // 用来触发父组件定义的@change-page\n\n      }, 200);\n    }\n  },\n  computed: {\n    //播放暂停按钮样式切换\n    playOrPause: function playOrPause() {\n      if (this.is_play) {\n        return 'layui-icon-pause';\n      } else {\n        return 'layui-icon-play';\n      }\n    },\n    //播放暂停按钮文字切换\n    playOrPauseWords: function playOrPauseWords() {\n      if (this.is_play) {\n        return '暂停';\n      } else {\n        return '播放';\n      }\n    },\n    //喇叭静音和播放样式切换\n    voiceMuted: function voiceMuted() {\n      if (this.is_muted) {\n        return 'layui-icon-mute';\n      } else {\n        return 'layui-icon-speaker';\n      }\n    },\n    //喇叭静音和播放文字切换\n    voiceMutedWords: function voiceMutedWords() {\n      if (this.is_muted) {\n        return '恢复音量';\n      } else {\n        return '静音';\n      }\n    },\n    //当前播放歌曲总时间转换00：00\n    songTimes: function songTimes() {\n      var minute = Math.floor(this.times / 60);\n\n      if (minute < 10) {\n        minute = \"0\" + minute;\n      }\n\n      var second = Math.floor(this.times - minute * 60);\n\n      if (second < 10) {\n        second = \"0\" + second;\n      }\n\n      var times = minute + ':' + second;\n      return times;\n    },\n    //当前播放歌曲的当前播放时间转换00：00\n    songTime: function songTime() {\n      var minute = Math.floor(this.time / 60);\n\n      if (minute < 10) {\n        minute = \"0\" + minute;\n      }\n\n      var second = Math.floor(this.time - minute * 60);\n\n      if (second < 10) {\n        second = \"0\" + second;\n      }\n\n      var time = minute + ':' + second;\n      return time;\n    }\n  }\n};",{"version":3,"sources":["Music.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"music\">\r\n    <div class=\"console\">\r\n      <div class=\"control\">\r\n        <i class=\"layui-icon layui-icon-left\" @click=\"musicPrev()\" title=\"上一首\"></i>\r\n        <i :class=\"['layui-icon',playOrPause]\" @click=\"musicPlayOrPause()\" :title=\"playOrPauseWords\"></i>\r\n        <i class=\"layui-icon layui-icon-right\" @click=\"musicNext()\" title=\"下一首\"></i>\r\n        <i :class=\"['layui-icon', voiceMuted]\" @click=\"musicVoice()\" :title=\"voiceMutedWords\"></i>\r\n      </div>\r\n      <div class=\"progress\" :title=\"songTimes\">\r\n        <div class=\"rate\" :style=\"{width: rate +'%'}\" :title=\"songTime\"></div>\r\n        <div class=\"point\" :style=\"{left: rate +'%'}\" :title=\"songTime\"></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"list\">\r\n      <div :class=\"{'active': nowMusic == index }\" v-for=\"(item, index) in musicList\" :key='item.id' @click=\"playList(index)\">\r\n        <span><font>{{index+1}}</font>{{item.name}}</span>\r\n        <span>{{item.singer}}</span>\r\n      </div>\r\n    </div>\r\n    <audio class=\"audio\" v-if=\"mp3_url\" :src=\"mp3_url\" preload></audio>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data(){\r\n    return{\r\n      error: '数据加载中',\r\n      musicList: [],\r\n      nowMusic: 0,\r\n      rate: 0, //进度，百分数\r\n      mp3_url: '',\r\n      is_play: false,\r\n      is_muted: false,\r\n      times: 0, //总秒数\r\n      time: 0,  //已经播放秒数\r\n      myTimer: null\r\n    }\r\n  },\r\n  mounted: function() { //钩子函数\r\n    // clearInterval(this.timer)\r\n    this.getMusic();\r\n  },\r\n  methods: {\r\n    /**\r\n     * 初始获取播放列表\r\n    */\r\n    getMusic: function(){\r\n      this.$http.get('https://a.abliulei.com/api/getmusic').then(\r\n        function(res){\r\n          let data = res.data.data\r\n          this.musicList = data\r\n          this.mp3_url = this.musicList[0][\"url\"]\r\n      })\r\n    },\r\n    /**\r\n     * 播放或者暂停\r\n    */\r\n    musicPlayOrPause: function(){\r\n      let _this = this\r\n      let audio = document.getElementsByClassName(\"audio\")[0]\r\n      if(_this.is_play){\r\n        //暂停\r\n        _this.progress(_this.time,_this.times,0)  //进度条暂停\r\n        audio.pause()\r\n      }else{\r\n        //判断是不是重新播放，如果进度条是0就需要加载新的\r\n        if(_this.time == 0){\r\n          audio.addEventListener('ended', function () {\r\n            _this.musicNext()\r\n          }, false);\r\n          audio.load()\r\n          audio.oncanplay = function(){\r\n            _this.times = audio.duration\r\n          }\r\n        }\r\n        //恢复进度条，播放\r\n        _this.progress(_this.time,_this.times,1)\r\n        audio.play()\r\n      }\r\n      _this.is_play = !_this.is_play\r\n      _this.returnStatus(_this.is_play) //返回播放状态\r\n    },\r\n    /**\r\n     * 控制进度条\r\n     * time   当前已经播放的秒数\r\n     * times  音乐总时长\r\n     * type   0暂停播放，1开始播放\r\n    */\r\n    progress: function(time,times,type){\r\n      let _this = this\r\n      clearInterval(_this.timer)\r\n      _this.timer = null\r\n      if(type === 1){\r\n        _this.time = time\r\n        _this.times = times\r\n        _this.timer = setInterval(() => {\r\n          _this.rate = (_this.time/_this.times*100).toFixed(2);\r\n          _this.time ++\r\n          if(_this.time == _this.times){\r\n            clearInterval(_this.timer)\r\n            _this.timer = null\r\n          }\r\n        }, 1000);\r\n      }\r\n    },\r\n    /**\r\n     * 上一首\r\n    */\r\n    musicPrev: function(){\r\n      // 默认循环播放，如果当前在第一首直接播放最后一首\r\n      if(this.nowMusic==0){\r\n        this.nowMusic = this.musicList.length-1\r\n      }else{\r\n        this.nowMusic = this.nowMusic-1\r\n      }\r\n      this.is_play = false\r\n      this.time = 0\r\n      this.rate = 0\r\n      this.playMusic()\r\n    },\r\n    /**\r\n     * 下一首\r\n    */\r\n    musicNext: function(){\r\n      // 默认循环播放，如果当前在最后一首直接播放第一首\r\n      if(this.nowMusic == this.musicList.length){\r\n        this.nowMusic = 0\r\n      }else{\r\n        this.nowMusic = this.nowMusic+1\r\n      }\r\n      this.is_play = false\r\n      this.time = 0\r\n      this.rate = 0\r\n      this.playMusic()\r\n    },\r\n    /**\r\n     * 播放列表里的歌\r\n    */\r\n    playList: function(index){\r\n      this.nowMusic = index\r\n      this.is_play = false\r\n      this.time = 0\r\n      this.rate = 0\r\n      this.playMusic()\r\n    },\r\n    /**\r\n     * 播放音频\r\n    */\r\n    playMusic: function(){\r\n      let _this = this\r\n      let audio = document.getElementsByClassName(\"audio\")[0]\r\n      _this.mp3_url = _this.musicList[_this.nowMusic][\"url\"]\r\n      //延迟200毫秒执行否则播放失败\r\n      setTimeout(function(){\r\n        audio.addEventListener('ended', function () {\r\n          _this.musicNext()\r\n        }, false);\r\n        audio.load()\r\n        audio.oncanplay = function(){\r\n          _this.times = audio.duration\r\n          _this.progress(_this.time,_this.times,1)\r\n        }\r\n        audio.play()\r\n        _this.is_play = true\r\n        _this.returnStatus(_this.is_play) //返回播放状态\r\n      },200)\r\n    },\r\n    musicVoice: function(){\r\n      let audio = document.getElementsByClassName(\"audio\")[0]\r\n      audio.muted = !audio.muted\r\n      this.is_muted = !this.is_muted\r\n    },\r\n    /**\r\n     * 返回播放状态\r\n    */\r\n    returnStatus: function(){\r\n      let _this = this\r\n      setTimeout(function(){\r\n        _this.$emit('returnStatus', _this.is_play) // 用来触发父组件定义的@change-page\r\n      },200)\r\n    }\r\n  },\r\n  computed: {\r\n    //播放暂停按钮样式切换\r\n    playOrPause: function(){\r\n      if(this.is_play){\r\n        return 'layui-icon-pause'\r\n      }else{\r\n        return 'layui-icon-play'\r\n      }\r\n    },\r\n    //播放暂停按钮文字切换\r\n    playOrPauseWords: function(){\r\n      if(this.is_play){\r\n        return '暂停'\r\n      }else{\r\n        return '播放'\r\n      }\r\n    },\r\n    //喇叭静音和播放样式切换\r\n    voiceMuted: function(){\r\n      if(this.is_muted){\r\n        return 'layui-icon-mute'\r\n      }else{\r\n        return 'layui-icon-speaker'\r\n      }\r\n    },\r\n    //喇叭静音和播放文字切换\r\n    voiceMutedWords: function(){\r\n      if(this.is_muted){\r\n        return '恢复音量'\r\n      }else{\r\n        return '静音'\r\n      }\r\n    },\r\n    //当前播放歌曲总时间转换00：00\r\n    songTimes: function(){\r\n      let minute = Math.floor(this.times / 60)\r\n      if(minute<10){\r\n        minute = \"0\"+minute\r\n      }\r\n      let second = Math.floor(this.times - (minute * 60))\r\n      if(second<10){\r\n        second = \"0\"+second\r\n      }\r\n      let times = minute+':'+second\r\n      return times\r\n    },\r\n    //当前播放歌曲的当前播放时间转换00：00\r\n    songTime: function(){\r\n      let minute = Math.floor(this.time / 60)\r\n      if(minute<10){\r\n        minute = \"0\"+minute\r\n      }\r\n      let second = Math.floor(this.time - (minute * 60))\r\n      if(second<10){\r\n        second = \"0\"+second\r\n      }\r\n      let time = minute+':'+second\r\n      return time\r\n    }\r\n  }, \r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.music{\r\n  width: 260px;\r\n  max-height: 250px;\r\n  background-color: #E6E6E6;\r\n  position: absolute;\r\n  left: 295px;\r\n  top: 25px;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n}\r\n.music .console{\r\n  width: 260px;\r\n  position: absolute;\r\n  background-color: #E6E6E6;\r\n  border-top-right-radius: 5px;\r\n  border-top-left-radius: 5px;\r\n}\r\n.music .console .control{\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin: 12px 0px;\r\n}\r\n.music .console .control i{\r\n  cursor: url('../assets/hand.png'),auto !important;\r\n  font-size: 18px;\r\n  color: #0a0a0a;\r\n}\r\n.music .console .progress{\r\n  height: 3px;\r\n  background: #ffffff;\r\n  border-radius: 5px;\r\n  position: relative;\r\n  display: flex;\r\n}\r\n.music .console .progress .rate{\r\n  background: #0a0a0a;\r\n  height: 3px;\r\n  border-radius: 5px;\r\n}\r\n.music .console .progress .point{\r\n  width: 5px;\r\n  height: 5px;\r\n  background: #0a0a0a;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  top: -1px;\r\n}\r\n.music .list{\r\n  max-height: 200px;\r\n  margin-top: 50px;\r\n  overflow: auto;\r\n  border-bottom-right-radius: 5px;\r\n  border-bottom-left-radius: 5px;\r\n}\r\n.music .list div{\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  cursor: url('../assets/hand.png'),auto !important;\r\n}\r\n.music .list div span{\r\n  display: flex;\r\n  cursor: url('../assets/hand.png'),auto !important;\r\n}\r\n.music .list div font{\r\n  cursor: url('../assets/hand.png'),auto !important;\r\n  margin-right: 3px;\r\n  margin-top: 1px;\r\n  text-align: center;\r\n  width: 15px;\r\n  display: block;\r\n  overflow: hidden;\r\n}\r\n.music .list div:hover{\r\n  background: #cccccc;\r\n  cursor: url('../assets/hand.png'),auto !important;\r\n}\r\n.music .list .active{\r\n  background: #c0c0c0;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"}]}